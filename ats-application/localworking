<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TechCorp Solutions - ATS</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --primary-color: #667eea;
            --success-color: #22c55e;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --info-color: #06b6d4;
            --background: #f8fafc;
            --surface: #ffffff;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --border-color: #e2e8f0;
        }

        body {
            font-family: 'Inter', system-ui, sans-serif;
            background: var(--primary-gradient);
            min-height: 100vh;
            color: var(--text-primary);
        }

        /* LOGIN SCREEN */
        .login-screen {
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            padding: 1rem;
            position: relative;
            overflow: hidden;
        }

        .login-screen::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%);
        }

        .login-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: 3rem;
            border-radius: 1.5rem;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 480px;
            position: relative;
            z-index: 1;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .login-header h1 {
            font-size: 2rem;
            font-weight: 800;
            text-align: center;
            margin-bottom: 0.5rem;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .login-header p {
            text-align: center;
            color: var(--text-secondary);
            margin-bottom: 2rem;
            font-weight: 500;
        }

        /* Tab System */
        .login-tabs {
            display: flex;
            margin-bottom: 2rem;
            background: #f1f5f9;
            border-radius: 0.75rem;
            padding: 4px;
        }

        .tab-btn {
            flex: 1;
            padding: 0.75rem 1rem;
            border: none;
            background: none;
            border-radius: 0.5rem;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            color: var(--text-secondary);
        }

        .tab-btn.active {
            background: white;
            color: var(--primary-color);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .login-form {
            display: none;
        }

        .login-form.active {
            display: block;
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        .form-control {
            width: 100%;
            padding: 1rem 1.5rem;
            border: 2px solid var(--border-color);
            border-radius: 0.75rem;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: var(--surface);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 1rem 2rem;
            background: var(--primary-gradient);
            color: white;
            border: none;
            border-radius: 0.75rem;
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(102, 126, 234, 0.3);
        }

        .btn-full {
            width: 100%;
        }

        .btn-secondary {
            background: var(--text-secondary);
        }

        .btn-success {
            background: var(--success-color);
        }

        .btn-danger {
            background: var(--danger-color);
        }

        .btn-primary {
            background: var(--primary-color);
        }

        /* Demo Accounts Section */
        .demo-accounts {
            margin-top: 2rem;
            padding: 1.5rem;
            background: linear-gradient(135deg, #f1f5f9, rgba(102, 126, 234, 0.05));
            border-radius: 0.75rem;
            border: 1px solid var(--border-color);
        }

        .demo-accounts h4 {
            margin-bottom: 1rem;
            color: var(--text-primary);
            font-size: 0.875rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .account-grid {
            display: grid;
            gap: 0.75rem;
        }

        .demo-account {
            background: white;
            padding: 1rem;
            border-radius: 0.5rem;
            border: 1px solid var(--border-color);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .demo-account:hover {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-1px);
        }

        .demo-account.recruiter {
            border-left: 4px solid var(--primary-color);
        }

        .demo-account.candidate {
            border-left: 4px solid var(--success-color);
        }

        .demo-account-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .demo-account-details h5 {
            color: var(--text-primary);
            font-size: 0.9rem;
            margin-bottom: 0.25rem;
        }

        .demo-account-details p {
            color: var(--text-secondary);
            font-size: 0.8rem;
            font-family: Monaco, monospace;
        }

        .role-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 1rem;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .role-badge.recruiter {
            background: rgba(102, 126, 234, 0.1);
            color: var(--primary-color);
        }

        .role-badge.candidate {
            background: rgba(34, 197, 94, 0.1);
            color: var(--success-color);
        }

        /* Main App Styles */
        .main-app {
            display: none;
            grid-template-areas: 
                "header header"
                "sidebar main";
            grid-template-columns: 260px 1fr;
            grid-template-rows: 70px 1fr;
            min-height: 100vh;
            background: var(--background);
        }

        .main-app.active {
            display: grid;
        }

        /* Header */
        .app-header {
            grid-area: header;
            background: var(--primary-gradient);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 2rem;
            color: white;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .header-left h2 {
            font-size: 1.5rem;
            font-weight: 800;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 2px solid rgba(255, 255, 255, 0.3);
            background: rgba(255, 255, 255, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .logout-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .logout-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-1px);
        }

        /* Sidebar */
        .sidebar {
            grid-area: sidebar;
            background: white;
            border-right: 1px solid var(--border-color);
            padding: 2rem 0;
        }

        .nav-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem 2rem;
            color: var(--text-secondary);
            cursor: pointer;
            transition: all 0.3s ease;
            border-right: 3px solid transparent;
        }

        .nav-item:hover {
            background: #f1f5f9;
            color: var(--text-primary);
        }

        .nav-item.active {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            color: var(--primary-color);
            border-right-color: var(--primary-color);
            font-weight: 600;
        }

        /* Main Content */
        .main-content {
            grid-area: main;
            padding: 2rem;
            overflow-y: auto;
        }

        .page {
            display: none;
        }

        .page.active {
            display: block;
            animation: slideIn 0.3s ease-out;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .page-header h1 {
            font-size: 2rem;
            font-weight: 800;
            color: var(--text-primary);
        }

        .page-header p {
            color: var(--text-secondary);
            margin-top: 0.5rem;
        }

        .btn-group {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        /* Cards */
        .card {
            background: white;
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .card h3 {
            color: var(--text-primary);
            margin-bottom: 1rem;
            font-size: 1.25rem;
            font-weight: 700;
        }

        /* File Upload Styles */
        .file-upload {
            border: 2px dashed var(--border-color);
            border-radius: 0.75rem;
            padding: 2rem;
            text-align: center;
            transition: all 0.3s ease;
            background: #f8fafc;
            cursor: pointer;
        }

        .file-upload:hover {
            border-color: var(--primary-color);
            background: rgba(102, 126, 234, 0.05);
        }

        .file-upload.dragover {
            border-color: var(--primary-color);
            background: rgba(102, 126, 234, 0.1);
            transform: scale(1.02);
        }

        .file-upload-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: var(--text-secondary);
        }

        .file-upload h4 {
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        .file-upload p {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        #fileInput {
            display: none;
        }

        .uploaded-files {
            margin-top: 1rem;
        }

        .file-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            background: white;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            margin-bottom: 0.5rem;
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .file-icon {
            width: 40px;
            height: 40px;
            border-radius: 0.5rem;
            background: rgba(102, 126, 234, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .file-details h5 {
            color: var(--text-primary);
            font-size: 0.9rem;
            margin-bottom: 0.25rem;
        }

        .file-details p {
            color: var(--text-secondary);
            font-size: 0.8rem;
        }

        .file-actions {
            display: flex;
            gap: 0.5rem;
        }

        .file-action {
            padding: 0.5rem;
            border: none;
            border-radius: 0.375rem;
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.3s ease;
        }

        .file-action.view {
            background: rgba(59, 130, 246, 0.1);
            color: #2563eb;
        }

        .file-action.delete {
            background: rgba(239, 68, 68, 0.1);
            color: #dc2626;
        }

        .file-action:hover {
            transform: scale(1.1);
        }

        /* Job Form Styles */
        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        textarea.form-control {
            min-height: 120px;
            resize: vertical;
        }

        select.form-control {
            cursor: pointer;
        }

        /* Table Styles */
        .table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 0.75rem;
            overflow: hidden;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .table th,
        .table td {
            padding: 1rem 1.5rem;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        .table th {
            background: var(--background);
            font-weight: 600;
            color: var(--text-primary);
        }

        .table tbody tr:hover {
            background: #f8fafc;
        }

        /* Status Badges */
        .badge {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.75rem;
            border-radius: 2rem;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .badge-success {
            background: rgba(34, 197, 94, 0.1);
            color: #16a34a;
        }

        .badge-warning {
            background: rgba(245, 158, 11, 0.1);
            color: #d97706;
        }

        .badge-info {
            background: rgba(59, 130, 246, 0.1);
            color: #2563eb;
        }

        .badge-danger {
            background: rgba(239, 68, 68, 0.1);
            color: #dc2626;
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            border-left: 4px solid;
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        }

        .stat-card.primary {
            border-left-color: var(--primary-color);
        }

        .stat-card.success {
            border-left-color: var(--success-color);
        }

        .stat-card.warning {
            border-left-color: var(--warning-color);
        }

        .stat-card .stat-icon {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            opacity: 0.8;
        }

        .stat-card h3 {
            font-size: 2rem;
            font-weight: 800;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        .stat-card p {
            color: var(--text-secondary);
            font-weight: 600;
        }

        /* Action Buttons */
        .action-btn {
            padding: 0.5rem;
            border: none;
            border-radius: 0.375rem;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.875rem;
            margin: 0 0.25rem;
        }

        .action-btn:hover {
            transform: scale(1.1);
        }

        .btn-edit {
            background: rgba(59, 130, 246, 0.1);
            color: #2563eb;
        }

        .btn-delete {
            background: rgba(239, 68, 68, 0.1);
            color: #dc2626;
        }

        .btn-view {
            background: rgba(34, 197, 94, 0.1);
            color: #16a34a;
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .main-app {
                grid-template-columns: 1fr;
                grid-template-areas: 
                    "header"
                    "main";
            }
            
            .sidebar {
                display: none;
            }
            
            .page-header {
                flex-direction: column;
                align-items: stretch;
                gap: 1rem;
            }
        }

        @media (max-width: 768px) {
            .login-container {
                padding: 2rem;
                max-width: 400px;
            }
            
            .account-grid {
                gap: 0.5rem;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .btn-group {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <!-- LOGIN SCREEN -->
    <div id="loginScreen" class="login-screen">
        <div class="login-container">
            <div class="login-header">
                <h1>TechCorp Solutions</h1>
                <p>Applicant Tracking System</p>
            </div>
            
            <!-- Tab Navigation -->
            <div class="login-tabs">
                <button class="tab-btn active" data-tab="login">Sign In</button>
                <button class="tab-btn" data-tab="register">Register</button>
            </div>
            
            <!-- Login Form -->
            <form id="loginForm" class="login-form active">
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-control" id="loginEmail" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Password</label>
                    <input type="password" class="form-control" id="loginPassword" required>
                </div>
                <button type="submit" class="btn btn-full">Sign In</button>
            </form>

            <!-- Register Form -->
            <form id="registerForm" class="login-form">
                <div class="form-group">
                    <label class="form-label">Full Name</label>
                    <input type="text" class="form-control" id="registerName" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-control" id="registerEmail" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Password</label>
                    <input type="password" class="form-control" id="registerPassword" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Role</label>
                    <select class="form-control" id="registerRole" required>
                        <option value="">Select Role</option>
                        <option value="candidate">Job Seeker</option>
                        <option value="recruiter">Recruiter</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-full">Create Account</button>
            </form>
            
            <!-- Demo Accounts - Anonymous but Functional -->
            <div class="demo-accounts">
                <h4>🎮 Try Demo Accounts (Click to Login)</h4>
                <div class="account-grid">
                    <div class="demo-account recruiter" data-email="demo.recruiter@company.com" data-password="demo123">
                        <div class="demo-account-info">
                            <div class="demo-account-details">
                                <h5>👩‍💼 Demo Recruiter</h5>
                                <p>demo.recruiter@company.com</p>
                            </div>
                            <span class="role-badge recruiter">Recruiter</span>
                        </div>
                    </div>
                    
                    <div class="demo-account candidate" data-email="demo.candidate@company.com" data-password="demo123">
                        <div class="demo-account-info">
                            <div class="demo-account-details">
                                <h5>👨‍💻 Demo User</h5>
                                <p>demo.candidate@company.com</p>
                            </div>
                            <span class="role-badge candidate">Candidate</span>
                        </div>
                    </div>
                    
                    <div class="demo-account recruiter" data-email="test.hr@company.com" data-password="test123">
                        <div class="demo-account-info">
                            <div class="demo-account-details">
                                <h5>🏢 Test Account</h5>
                                <p>test.hr@company.com</p>
                            </div>
                            <span class="role-badge recruiter">HR Manager</span>
                        </div>
                    </div>
                    
                    <div class="demo-account candidate" data-email="guest.user@company.com" data-password="guest123">
                        <div class="demo-account-info">
                            <div class="demo-account-details">
                                <h5>👤 Guest User</h5>
                                <p>guest.user@company.com</p>
                            </div>
                            <span class="role-badge candidate">Job Seeker</span>
                        </div>
                    </div>
                </div>
                
                <p style="margin-top: 1rem; font-size: 0.8rem; color: #64748b; text-align: center;">
                    ✨ <strong>New!</strong> You can also register your own account above
                </p>
            </div>
        </div>
    </div>

    <!-- MAIN APP -->
    <div id="mainApp" class="main-app">
        <!-- Header -->
        <header class="app-header">
            <div class="header-left">
                <h2>🚀 TechCorp ATS</h2>
            </div>
            
            <div class="header-right">
                <div class="user-menu">
                    <div class="user-avatar" id="userAvatar">👤</div>
                    <div>
                        <div id="userName" style="font-weight: 600;">Loading...</div>
                        <div id="userRole" style="font-size: 0.8rem; opacity: 0.8;">Loading...</div>
                    </div>
                    <button class="logout-btn" onclick="logout()">Logout</button>
                </div>
            </div>
        </header>

        <!-- Sidebar -->
        <aside class="sidebar">
            <nav class="sidebar-nav">
                <div class="nav-item active" data-page="dashboard">
                    <span>📊</span>
                    <span>Dashboard</span>
                </div>
                <div class="nav-item" data-page="jobs">
                    <span>💼</span>
                    <span>Jobs</span>
                </div>
                <div class="nav-item" data-page="applications">
                    <span>📄</span>
                    <span>Applications</span>
                </div>
                <div class="nav-item" data-page="profile">
                    <span>👤</span>
                    <span>Profile</span>
                </div>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Dashboard Page -->
            <div id="dashboard" class="page active">
                <div class="page-header">
                    <div>
                        <h1>Dashboard 📊</h1>
                        <p>Welcome back to your ATS dashboard!</p>
                    </div>
                </div>
                
                <div class="stats-grid">
                    <div class="stat-card primary">
                        <div class="stat-icon">💼</div>
                        <h3 id="dashboardJobs">0</h3>
                        <p>Available Jobs</p>
                    </div>
                    <div class="stat-card success">
                        <div class="stat-icon">👥</div>
                        <h3 id="dashboardApplications">0</h3>
                        <p>Applications</p>
                    </div>
                    <div class="stat-card warning">
                        <div class="stat-icon">📄</div>
                        <h3 id="dashboardResumes">0</h3>
                        <p>Resumes Uploaded</p>
                    </div>
                </div>

                <div class="card">
                    <h3>🎉 Welcome to Your ATS Dashboard!</h3>
                    <p>Your modern Applicant Tracking System is fully operational. Navigate through the sidebar to explore different features:</p>
                    <ul style="margin: 1rem 0; padding-left: 2rem; color: #64748b;">
                        <li><strong>Jobs:</strong> Browse and manage job openings</li>
                        <li><strong>Applications:</strong> Track your applications or review candidates</li>
                        <li><strong>Profile:</strong> Manage your profile and upload documents</li>
                    </ul>
                </div>
            </div>

            <!-- Jobs Page -->
            <div id="jobs" class="page">
                <div class="page-header">
                    <div>
                        <h1>Jobs 💼</h1>
                        <p>Manage job postings and opportunities</p>
                    </div>
                    <div class="btn-group" id="jobsActions">
                        <!-- Will be populated based on user role -->
                    </div>
                </div>

                <!-- Job Posting Form (Recruiters only) -->
                <div id="jobPostingForm" class="card" style="display: none;">
                    <h3>📝 Post New Job</h3>
                    <form id="postJobForm">
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">Job Title</label>
                                <input type="text" class="form-control" id="jobTitle" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Department</label>
                                <select class="form-control" id="jobDepartment" required>
                                    <option value="">Select Department</option>
                                    <option value="Engineering">Engineering</option>
                                    <option value="Product">Product</option>
                                    <option value="Design">Design</option>
                                    <option value="Marketing">Marketing</option>
                                    <option value="Sales">Sales</option>
                                    <option value="HR">Human Resources</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">Location</label>
                                <input type="text" class="form-control" id="jobLocation" placeholder="e.g., San Francisco, CA or Remote" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Salary Range</label>
                                <input type="text" class="form-control" id="jobSalary" placeholder="e.g., $80,000 - $120,000">
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Job Description</label>
                            <textarea class="form-control" id="jobDescription" rows="6" placeholder="Describe the role, responsibilities, and requirements..." required></textarea>
                        </div>
                        <div class="btn-group">
                            <button type="submit" class="btn btn-success">
                                <span>✅</span>
                                Post Job
                            </button>
                            <button type="button" class="btn btn-secondary" onclick="hideJobForm()">
                                <span>❌</span>
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>

                <!-- Jobs List -->
                <div class="card">
                    <h3>💼 Job Opportunities</h3>
                    <div id="jobsList">
                        <p style="color: #64748b; text-align: center; padding: 2rem;">Loading jobs...</p>
                    </div>
                </div>
            </div>

            <!-- Applications Page -->
            <div id="applications" class="page">
                <div class="page-header">
                    <div>
                        <h1>Applications 📄</h1>
                        <p>Track applications and manage candidates</p>
                    </div>
                </div>

                <div class="card">
                    <h3 id="applicationsTitle">📋 Applications</h3>
                    <div id="applicationsList">
                        <p style="color: #64748b; text-align: center; padding: 2rem;">Loading applications...</p>
                    </div>
                </div>
            </div>

            <!-- Profile Page -->
            <div id="profile" class="page">
                <div class="page-header">
                    <div>
                        <h1>Profile 👤</h1>
                        <p>Manage your profile and documents</p>
                    </div>
                </div>

                <!-- Resume Upload (Candidates only) -->
                <div id="resumeSection" class="card" style="display: none;">
                    <h3>📄 Resume & Documents</h3>
                    <p>Upload your resume and other relevant documents to apply for jobs.</p>
                    
                    <div class="file-upload" id="fileUploadArea">
                        <div class="file-upload-icon">📄</div>
                        <h4>Upload Your Resume</h4>
                        <p>Drag and drop your files here or click to browse</p>
                        <p style="font-size: 0.8rem; margin-top: 0.5rem;">Supported formats: PDF, DOC, DOCX (Max: 5MB)</p>
                    </div>
                    
                    <input type="file" id="fileInput" accept=".pdf,.doc,.docx" multiple>
                    
                    <div id="uploadedFiles" class="uploaded-files">
                        <!-- Uploaded files will appear here -->
                    </div>
                </div>

                <!-- Profile Information -->
                <div class="card">
                    <h3>ℹ️ Profile Information</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 2rem;">
                        <div>
                            <h5 style="color: #64748b; font-size: 0.9rem; margin-bottom: 0.5rem;">NAME</h5>
                            <p id="profileName" style="font-size: 1.1rem; font-weight: 600;">Loading...</p>
                        </div>
                        <div>
                            <h5 style="color: #64748b; font-size: 0.9rem; margin-bottom: 0.5rem;">EMAIL</h5>
                            <p id="profileEmail" style="font-size: 1.1rem; color: #667eea;">Loading...</p>
                        </div>
                        <div>
                            <h5 style="color: #64748b; font-size: 0.9rem; margin-bottom: 0.5rem;">ROLE</h5>
                            <p id="profileRole" style="font-size: 1.1rem;">Loading...</p>
                        </div>
                        <div>
                            <h5 style="color: #64748b; font-size: 0.9rem; margin-bottom: 0.5rem;">ACCOUNT TYPE</h5>
                            <p id="profileAccountType" style="font-size: 1.1rem;">Loading...</p>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        // ANONYMOUS Demo Accounts with FULL Functionality
        const demoAccounts = {
            'demo.recruiter@company.com': { password: 'demo123', role: 'recruiter', name: 'Demo Recruiter', title: 'HR Manager' },
            'demo.candidate@company.com': { password: 'demo123', role: 'candidate', name: 'Demo User', title: 'Job Seeker' },
            'test.hr@company.com': { password: 'test123', role: 'recruiter', name: 'Test Account', title: 'Recruiter' },
            'guest.user@company.com': { password: 'guest123', role: 'candidate', name: 'Guest User', title: 'Job Seeker' }
        };

        let currentUser = null;

        document.addEventListener('DOMContentLoaded', function() {
            setupTabs();
            setupLogin();
            setupRegistration();
            setupDemoAccounts();
            setupNavigation();
            setupFileUpload();
            setupJobForm();
        });

        function setupTabs() {
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const targetTab = btn.getAttribute('data-tab');
                    
                    document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    
                    document.querySelectorAll('.login-form').forEach(form => form.classList.remove('active'));
                    document.getElementById(targetTab + 'Form').classList.add('active');
                });
            });
        }

        function setupLogin() {
            document.getElementById('loginForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const email = document.getElementById('loginEmail').value;
                const password = document.getElementById('loginPassword').value;
                
                if (demoAccounts[email] && demoAccounts[email].password === password) {
                    login(demoAccounts[email], email);
                    return;
                }
                
                const registeredUsers = JSON.parse(localStorage.getItem('ats-users') || '{}');
                if (registeredUsers[email] && registeredUsers[email].password === password) {
                    login(registeredUsers[email], email);
                    return;
                }
                
                alert('Invalid email or password. Try a demo account or register a new one.');
            });
        }

        function setupRegistration() {
            document.getElementById('registerForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const name = document.getElementById('registerName').value;
                const email = document.getElementById('registerEmail').value;
                const password = document.getElementById('registerPassword').value;
                const role = document.getElementById('registerRole').value;
                
                if (demoAccounts[email]) {
                    alert('This email is already registered as a demo account. Please use the demo login.');
                    return;
                }
                
                const registeredUsers = JSON.parse(localStorage.getItem('ats-users') || '{}');
                if (registeredUsers[email]) {
                    alert('An account with this email already exists. Please login instead.');
                    return;
                }
                
                registeredUsers[email] = { 
                    password, 
                    role, 
                    name, 
                    title: role === 'recruiter' ? 'Recruiter' : 'Job Seeker',
                    isRegistered: true 
                };
                localStorage.setItem('ats-users', JSON.stringify(registeredUsers));
                
                alert('Account created successfully! You can now login with your credentials.');
                
                document.querySelector('[data-tab="login"]').click();
                document.getElementById('loginEmail').value = email;
                document.getElementById('loginPassword').focus();
                
                this.reset();
            });
        }

        function setupDemoAccounts() {
            document.querySelectorAll('.demo-account').forEach(account => {
                account.addEventListener('click', function() {
                    const email = this.getAttribute('data-email');
                    const password = this.getAttribute('data-password');
                    
                    document.getElementById('loginEmail').value = email;
                    document.getElementById('loginPassword').value = password;
                    
                    document.querySelector('[data-tab="login"]').click();
                    
                    setTimeout(() => {
                        login(demoAccounts[email], email);
                    }, 500);
                });
            });
        }

        function login(userData, email) {
            currentUser = { ...userData, email };
            
            document.getElementById('loginScreen').style.display = 'none';
            document.getElementById('mainApp').classList.add('active');
            
            document.getElementById('userName').textContent = userData.name;
            document.getElementById('userRole').textContent = userData.title || userData.role;
            
            const avatar = userData.role === 'recruiter' ? '👩‍💼' : '👨‍💻';
            document.getElementById('userAvatar').textContent = avatar;
            
            // Update profile information
            document.getElementById('profileName').textContent = userData.name;
            document.getElementById('profileEmail').textContent = email;
            document.getElementById('profileRole').textContent = userData.title || userData.role;
            document.getElementById('profileAccountType').textContent = userData.isRegistered ? 'Registered Account' : 'Demo Account';
            
            // Show/hide role-specific features
            setupRoleBasedFeatures();
            
            // Load user data
            loadJobs();
            loadApplications();
            updateDashboardStats();
            
            setTimeout(() => {
                alert(`Welcome ${userData.name}! You're logged in as a ${userData.role}.`);
            }, 500);
        }

        function setupRoleBasedFeatures() {
            const isRecruiter = currentUser.role === 'recruiter';
            
            // Show/hide resume section for candidates
            document.getElementById('resumeSection').style.display = isRecruiter ? 'none' : 'block';
            
            // Setup jobs page actions based on role
            const jobsActions = document.getElementById('jobsActions');
            if (isRecruiter) {
                jobsActions.innerHTML = `
                    <button class="btn btn-success" onclick="showJobForm()">
                        <span>➕</span>
                        Post New Job
                    </button>
                    <button class="btn btn-secondary">
                        <span>📤</span>
                        Export Jobs
                    </button>
                `;
            } else {
                jobsActions.innerHTML = `
                    <button class="btn btn-primary" onclick="refreshJobs()">
                        <span>🔄</span>
                        Refresh Jobs
                    </button>
                `;
            }
            
            // Update applications title
            document.getElementById('applicationsTitle').textContent = 
                isRecruiter ? '📋 Candidate Applications' : '📋 My Applications';
        }

        function setupFileUpload() {
            const fileUploadArea = document.getElementById('fileUploadArea');
            const fileInput = document.getElementById('fileInput');
            
            fileUploadArea.addEventListener('click', () => fileInput.click());
            
            fileUploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                fileUploadArea.classList.add('dragover');
            });
            
            fileUploadArea.addEventListener('dragleave', () => {
                fileUploadArea.classList.remove('dragover');
            });
            
            fileUploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                fileUploadArea.classList.remove('dragover');
                handleFiles(e.dataTransfer.files);
            });
            
            fileInput.addEventListener('change', (e) => {
                handleFiles(e.target.files);
            });
        }

        function handleFiles(files) {
            Array.from(files).forEach(file => {
                if (file.size > 5 * 1024 * 1024) {
                    alert(`${file.name} is too large. Maximum file size is 5MB.`);
                    return;
                }
                
                if (!file.name.match(/\.(pdf|doc|docx)$/i)) {
                    alert(`${file.name} is not a supported format. Please use PDF, DOC, or DOCX files.`);
                    return;
                }
                
                uploadFile(file);
            });
        }

        function uploadFile(file) {
            const userFiles = JSON.parse(localStorage.getItem(`ats-files-${currentUser.email}`) || '[]');
            
            const fileData = {
                id: Date.now() + Math.random(),
                name: file.name,
                size: file.size,
                type: file.type,
                uploadDate: new Date().toLocaleDateString(),
                content: null // In a real app, you'd upload to a server
            };
            
            userFiles.push(fileData);
            localStorage.setItem(`ats-files-${currentUser.email}`, JSON.stringify(userFiles));
            
            displayUploadedFiles();
            updateDashboardStats();
            
            alert(`${file.name} uploaded successfully!`);
        }

        function displayUploadedFiles() {
            const userFiles = JSON.parse(localStorage.getItem(`ats-files-${currentUser.email}`) || '[]');
            const uploadedFilesDiv = document.getElementById('uploadedFiles');
            
            if (userFiles.length === 0) {
                uploadedFilesDiv.innerHTML = '';
                return;
            }
            
            uploadedFilesDiv.innerHTML = `
                <h4 style="margin: 2rem 0 1rem; color: #1e293b;">📁 Uploaded Documents</h4>
                ${userFiles.map(file => `
                    <div class="file-item">
                        <div class="file-info">
                            <div class="file-icon">📄</div>
                            <div class="file-details">
                                <h5>${file.name}</h5>
                                <p>${formatFileSize(file.size)} • Uploaded ${file.uploadDate}</p>
                            </div>
                        </div>
                        <div class="file-actions">
                            <button class="file-action view" onclick="viewFile('${file.id}')">👁️ View</button>
                            <button class="file-action delete" onclick="deleteFile('${file.id}')">🗑️ Delete</button>
                        </div>
                    </div>
                `).join('')}
            `;
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function viewFile(fileId) {
            alert('File preview would open here. In a real application, this would show a preview of the document.');
        }

        function deleteFile(fileId) {
            if (!confirm('Are you sure you want to delete this file?')) return;
            
            const userFiles = JSON.parse(localStorage.getItem(`ats-files-${currentUser.email}`) || '[]');
            const updatedFiles = userFiles.filter(file => file.id != fileId);
            localStorage.setItem(`ats-files-${currentUser.email}`, JSON.stringify(updatedFiles));
            
            displayUploadedFiles();
            updateDashboardStats();
            
            alert('File deleted successfully!');
        }

        function setupJobForm() {
            document.getElementById('postJobForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const jobData = {
                    id: Date.now() + Math.random(),
                    title: document.getElementById('jobTitle').value,
                    department: document.getElementById('jobDepartment').value,
                    location: document.getElementById('jobLocation').value,
                    salary: document.getElementById('jobSalary').value,
                    description: document.getElementById('jobDescription').value,
                    postedBy: currentUser.email,
                    postedDate: new Date().toLocaleDateString(),
                    status: 'Active',
                    applications: 0
                };
                
                const allJobs = JSON.parse(localStorage.getItem('ats-jobs') || '[]');
                allJobs.push(jobData);
                localStorage.setItem('ats-jobs', JSON.stringify(allJobs));
                
                alert('Job posted successfully!');
                this.reset();
                hideJobForm();
                loadJobs();
                updateDashboardStats();
            });
        }

        function showJobForm() {
            document.getElementById('jobPostingForm').style.display = 'block';
            document.getElementById('jobTitle').focus();
        }

        function hideJobForm() {
            document.getElementById('jobPostingForm').style.display = 'none';
        }

        function loadJobs() {
            const allJobs = JSON.parse(localStorage.getItem('ats-jobs') || '[]');
            const jobsList = document.getElementById('jobsList');
            
            if (allJobs.length === 0) {
                jobsList.innerHTML = `
                    <div style="text-align: center; padding: 3rem; color: #64748b;">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">💼</div>
                        <h4>No jobs available</h4>
                        <p>${currentUser.role === 'recruiter' ? 'Post your first job to get started!' : 'Check back later for new opportunities.'}</p>
                    </div>
                `;
                return;
            }
            
            jobsList.innerHTML = allJobs.map(job => `
                <div style="border: 1px solid #e2e8f0; border-radius: 0.75rem; padding: 1.5rem; margin-bottom: 1rem; background: #f8fafc;">
                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 1rem;">
                        <div>
                            <h4 style="color: #1e293b; margin-bottom: 0.5rem;">${job.title}</h4>
                            <p style="color: #64748b; font-size: 0.9rem;">${job.department} • ${job.location}</p>
                            ${job.salary ? `<p style="color: #16a34a; font-size: 0.9rem; font-weight: 600;">💰 ${job.salary}</p>` : ''}
                        </div>
                        <div style="text-align: right;">
                            <span class="badge badge-success">${job.status}</span>
                            <p style="color: #64748b; font-size: 0.8rem; margin-top: 0.5rem;">Posted ${job.postedDate}</p>
                        </div>
                    </div>
                    <p style="color: #64748b; margin-bottom: 1rem; line-height: 1.5;">${job.description.substring(0, 200)}${job.description.length > 200 ? '...' : ''}</p>
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <p style="color: #64748b; font-size: 0.9rem;">👥 ${job.applications} applications</p>
                        <div>
                            ${currentUser.role === 'candidate' ? 
                                `<button class="btn btn-primary" onclick="applyToJob('${job.id}')">
                                    <span>📝</span>
                                    Apply Now
                                </button>` :
                                `<button class="action-btn btn-view" onclick="viewJob('${job.id}')">👁️</button>
                                <button class="action-btn btn-edit" onclick="editJob('${job.id}')">✏️</button>
                                <button class="action-btn btn-delete" onclick="deleteJob('${job.id}')">🗑️</button>`
                            }
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function applyToJob(jobId) {
            const userFiles = JSON.parse(localStorage.getItem(`ats-files-${currentUser.email}`) || '[]');
            
            if (userFiles.length === 0) {
                alert('Please upload your resume first in the Profile section before applying to jobs.');
                return;
            }
            
            const applications = JSON.parse(localStorage.getItem(`ats-applications-${currentUser.email}`) || '[]');
            
            if (applications.find(app => app.jobId === jobId)) {
                alert('You have already applied to this job!');
                return;
            }
            
            const allJobs = JSON.parse(localStorage.getItem('ats-jobs') || '[]');
            const job = allJobs.find(j => j.id == jobId);
            
            if (!job) {
                alert('Job not found!');
                return;
            }
            
            const application = {
                id: Date.now() + Math.random(),
                jobId: jobId,
                jobTitle: job.title,
                candidateEmail: currentUser.email,
                candidateName: currentUser.name,
                appliedDate: new Date().toLocaleDateString(),
                status: 'Applied',
                resume: userFiles[0].name // Use first uploaded file as resume
            };
            
            applications.push(application);
            localStorage.setItem(`ats-applications-${currentUser.email}`, JSON.stringify(applications));
            
            // Update job application count
            job.applications = (job.applications || 0) + 1;
            localStorage.setItem('ats-jobs', JSON.stringify(allJobs));
            
            alert(`Application submitted successfully for ${job.title}!`);
            loadJobs();
            loadApplications();
            updateDashboardStats();
        }

        function loadApplications() {
            const applicationsList = document.getElementById('applicationsList');
            
            if (currentUser.role === 'candidate') {
                const userApplications = JSON.parse(localStorage.getItem(`ats-applications-${currentUser.email}`) || '[]');
                
                if (userApplications.length === 0) {
                    applicationsList.innerHTML = `
                        <div style="text-align: center; padding: 3rem; color: #64748b;">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">📄</div>
                            <h4>No applications yet</h4>
                            <p>Browse jobs and submit your first application!</p>
                        </div>
                    `;
                    return;
                }
                
                applicationsList.innerHTML = `
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Job Title</th>
                                <th>Applied Date</th>
                                <th>Status</th>
                                <th>Resume</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${userApplications.map(app => `
                                <tr>
                                    <td><strong>${app.jobTitle}</strong></td>
                                    <td>${app.appliedDate}</td>
                                    <td><span class="badge badge-info">${app.status}</span></td>
                                    <td>📄 ${app.resume}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
            } else {
                // Recruiter view - show all applications
                const allUsers = { ...demoAccounts, ...JSON.parse(localStorage.getItem('ats-users') || '{}') };
                let allApplications = [];
                
                Object.keys(allUsers).forEach(userEmail => {
                    const userApps = JSON.parse(localStorage.getItem(`ats-applications-${userEmail}`) || '[]');
                    allApplications = allApplications.concat(userApps);
                });
                
                if (allApplications.length === 0) {
                    applicationsList.innerHTML = `
                        <div style="text-align: center; padding: 3rem; color: #64748b;">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">📄</div>
                            <h4>No applications received</h4>
                            <p>Applications will appear here as candidates apply to your jobs.</p>
                        </div>
                    `;
                    return;
                }
                
                applicationsList.innerHTML = `
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Candidate</th>
                                <th>Job Title</th>
                                <th>Applied Date</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${allApplications.map(app => `
                                <tr>
                                    <td>
                                        <div>
                                            <strong>${app.candidateName}</strong><br>
                                            <small style="color: #64748b;">${app.candidateEmail}</small>
                                        </div>
                                    </td>
                                    <td>${app.jobTitle}</td>
                                    <td>${app.appliedDate}</td>
                                    <td><span class="badge badge-info">${app.status}</span></td>
                                    <td>
                                        <button class="action-btn btn-view" onclick="viewApplication('${app.id}')">👁️</button>
                                        <button class="action-btn btn-edit" onclick="updateApplicationStatus('${app.id}')">✏️</button>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
            }
        }

        function updateDashboardStats() {
            const allJobs = JSON.parse(localStorage.getItem('ats-jobs') || '[]');
            const userFiles = JSON.parse(localStorage.getItem(`ats-files-${currentUser.email}`) || '[]');
            
            document.getElementById('dashboardJobs').textContent = allJobs.length;
            document.getElementById('dashboardResumes').textContent = userFiles.length;
            
            if (currentUser.role === 'candidate') {
                const userApplications = JSON.parse(localStorage.getItem(`ats-applications-${currentUser.email}`) || '[]');
                document.getElementById('dashboardApplications').textContent = userApplications.length;
            } else {
                // Count all applications for recruiters
                const allUsers = { ...demoAccounts, ...JSON.parse(localStorage.getItem('ats-users') || '{}') };
                let totalApplications = 0;
                Object.keys(allUsers).forEach(userEmail => {
                    const userApps = JSON.parse(localStorage.getItem(`ats-applications-${userEmail}`) || '[]');
                    totalApplications += userApps.length;
                });
                document.getElementById('dashboardApplications').textContent = totalApplications;
            }
        }

        function setupNavigation() {
            document.querySelectorAll('.nav-item').forEach(item => {
                item.addEventListener('click', function() {
                    const targetPage = this.getAttribute('data-page');
                    
                    document.querySelectorAll('.nav-item').forEach(nav => nav.classList.remove('active'));
                    this.classList.add('active');
                    
                    document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
                    document.getElementById(targetPage).classList.add('active');
                    
                    // Load page-specific data
                    if (targetPage === 'jobs') loadJobs();
                    if (targetPage === 'applications') loadApplications();
                    if (targetPage === 'profile') displayUploadedFiles();
                });
            });
        }

        function refreshJobs() {
            loadJobs();
            alert('Jobs refreshed!');
        }

        function viewJob(jobId) {
            alert('Job details would be displayed in a modal. This feature would show full job description and requirements.');
        }

        function editJob(jobId) {
            alert('Job editing form would appear here. This feature would allow updating job details.');
        }

        function deleteJob(jobId) {
            if (!confirm('Are you sure you want to delete this job posting?')) return;
            
            const allJobs = JSON.parse(localStorage.getItem('ats-jobs') || '[]');
            const updatedJobs = allJobs.filter(job => job.id != jobId);
            localStorage.setItem('ats-jobs', JSON.stringify(updatedJobs));
            
            loadJobs();
            updateDashboardStats();
            alert('Job deleted successfully!');
        }

        function viewApplication(applicationId) {
            alert('Application details would be displayed in a modal. This would show candidate profile, resume, and application history.');
        }

        function updateApplicationStatus(applicationId) {
            alert('Status update form would appear here. This would allow changing application status (Interview, Offer, Rejected, etc.)');
        }

        function logout() {
            currentUser = null;
            
            document.getElementById('mainApp').classList.remove('active');
            document.getElementById('loginScreen').style.display = 'flex';
            
            document.getElementById('loginEmail').value = '';
            document.getElementById('loginPassword').value = '';
            
            // Reset navigation
            document.querySelectorAll('.nav-item').forEach(nav => nav.classList.remove('active'));
            document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
            document.querySelector('.nav-item[data-page="dashboard"]').classList.add('active');
            document.getElementById('dashboard').classList.add('active');
            
            document.querySelector('[data-tab="login"]').click();
            
            alert('You have been logged out successfully.');
        }
    </script>
<body>
<html>